/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, SetStatusMsg, Addr, QueryMsg, AllowanceResponse, Status, StatusResponse } from "./Blacklist.types";
export interface BlacklistReadOnlyInterface {
  contractAddress: string;
  getStatus: ({
    address
  }: {
    address: Addr;
  }) => Promise<StatusResponse>;
  getAllowance: ({
    address,
    sender
  }: {
    address: Addr;
    sender: Addr;
  }) => Promise<AllowanceResponse>;
}
export class BlacklistQueryClient implements BlacklistReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getStatus = this.getStatus.bind(this);
    this.getAllowance = this.getAllowance.bind(this);
  }

  getStatus = async ({
    address
  }: {
    address: Addr;
  }): Promise<StatusResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_status: {
        address
      }
    });
  };
  getAllowance = async ({
    address,
    sender
  }: {
    address: Addr;
    sender: Addr;
  }): Promise<AllowanceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_allowance: {
        address,
        sender
      }
    });
  };
}
export interface BlacklistInterface extends BlacklistReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setStatus: ({
    status
  }: {
    status: SetStatusMsg;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class BlacklistClient extends BlacklistQueryClient implements BlacklistInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setStatus = this.setStatus.bind(this);
  }

  setStatus = async ({
    status
  }: {
    status: SetStatusMsg;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_status: {
        status
      }
    }, fee, memo, funds);
  };
}